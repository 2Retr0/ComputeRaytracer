#version 450

#define PI       3.14159265359
#define INFINITY 3.402823466e+38

#define MAT_LAMBERTIAN    1
#define MAT_METAL         2
#define MAT_DIELECTRIC    4
#define MAT_DIFFUSE_LIGHT 8

#define TYPE_SPHERE 1
#define TYPE_QUAD   2
#define TYPE_TRI    4

#define NUM_SAMPLES 1
#define MAX_BOUNCES 10

#define BAD_INDEX 0xFFFFFFFF
#define DEFAULT_BACKGROUND (vec3(-1.0))

layout (local_size_x = 8, local_size_y = 8) in;

layout (binding = 0, rgba32f) uniform image2D outImage;

struct Material {
    vec3 albedo;
    float fuzziness;
    uint type;
};

struct Sphere {
    vec3 center;
    float radius;
    Material material;
};

struct Quad {
    vec3 corner; float d;
    vec3 u;      float pad0;
    vec3 v;      float pad1;
    vec3 normal; float pad2;
    vec3 w;      float pad3;
    Material material;
};

struct Tri {
    vec3 v0; float pad0;
    vec3 v1; float pad1;
    vec3 v2; float pad2;
    vec3 u;  float pad3;
    vec3 v;  float pad4;
    Material material;
};

struct AABB {
    vec3 min;
    float pad; // Don't use!
    vec3 max;
};

struct BVHNode {
    AABB aabb;
    uint objectBufferIndex;
    uint hitIndex;
    uint missIndex;
    float pad0;
    uint type;
    uint numChildren;
    vec2 pad1;
};

struct CameraData {
    vec3 position;
    bool shouldRenderAABB;
    vec3 backward;
    float lensRadius;
    vec3 right;
    float focusDistance;
    vec3 up;
    float iteration;
    vec3 horizontal;
    float seed;
    vec3 vertical;
    float pad; // Don't use!
};

layout (binding = 1) uniform SceneParameters {
    vec3 backgroundColor;
    float pad; // Don't use!
    CameraData camera;
} scene;

CameraData camera = scene.camera;

layout (std140, binding = 2) readonly buffer BoundingVolumeHierarchy {
    BVHNode bvh[];
};

layout (std140, binding = 3) readonly buffer Spheres {
    Sphere spheres[];
};

layout (std140, binding = 4) readonly buffer Quads {
    Quad quads[];
};

layout (binding = 5) uniform sampler2D tex;

layout (std140, binding = 6) readonly buffer Tris {
    Tri tris[];
};


// Source: Quality hashes collection - nimitz
// https://www.shadertoy.com/view/Xt3cDn
float hashSeed = camera.seed * dot(gl_GlobalInvocationID.xy, gl_GlobalInvocationID.yx);

uint base_hash(uvec2 seed) {
    seed = 1103515245U * ((seed >> 1U) ^ (seed.yx));
    uint h32 = 1103515245U * ((seed.x) ^ (seed.y >> 3U));
    return h32 ^ (h32 >> 16);
}

float hash_1(inout float seed) {
    uint n = base_hash(floatBitsToUint(vec2(seed += 0.1, seed += 0.1)));
    return float(n) * (1.0 / float(0xFFFFFFFFU));
}

vec2 hash_2(inout float seed) {
    uint n = base_hash(floatBitsToUint(vec2(seed += 0.1, seed += 0.1)));
    uvec2 rz = uvec2(n, n * 48271U);
    return vec2(rz.xy & uvec2(0x7FFFFFFFU)) / float(0x7FFFFFFF);
}

vec3 hash_3(inout float seed) {
    uint n = base_hash(floatBitsToUint(vec2(seed += 0.1, seed += 0.1)));
    uvec3 rz = uvec3(n, n * 16807U, n * 48271U);
    return vec3(rz & uvec3(0x7FFFFFFFU)) / float(0x7FFFFFFF);
}

vec2 random_in_unit_disk(inout float seed) {
    vec2 h = hash_2(seed) * vec2(1.0, 2.0 * PI);
    return h.x * vec2(cos(h.y), sin(h.y));
}

// Source: Karthik Karanth's blog
// https://karthikkaranth.me/blog/generating-random-points-in-a-sphere/#better-choice-of-spherical-coordinates
vec3 random_in_unit_sphere(inout float seed) {
    vec3 h = hash_3(seed) * vec3(2.0 * PI, 2.0, 1.0) - vec3(0.0, 1.0, 0.0);
    float theta = h.x;
    float sinPhi = sqrt(1.0 - h.y * h.y);
    float r = pow(h.z, 0.3333333334);

    return r * vec3(cos(theta) * sinPhi, sin(theta) * sinPhi, h.y);
}



struct Ray {
    vec3 origin, direction;
};

Ray camera_get_ray(vec2 uv) {
    vec2 radius = camera.lensRadius * random_in_unit_disk(hashSeed);
    vec3 offset = camera.right * radius.x + camera.up * radius.y;
    vec3 lowerLeftCorner = camera.position - camera.horizontal*0.5f - camera.vertical*0.5f - camera.focusDistance*camera.backward;

    vec3 rayOrigin = camera.position + offset;
    vec3 rayDirection = lowerLeftCorner + uv.x*camera.horizontal + uv.y*camera.vertical - rayOrigin;

    return Ray(rayOrigin, normalize(rayDirection));
}



bool should_refract(in vec3 incoming, in vec3 normal, in float refractiveIndex, in float refractionRatio) {
    float cosTheta = min(dot(-incoming, normal), 1.0);
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    // One troublesome practical issue is that when the ray is in the material with the higher refractive index,
    // there is no real solution to Snellâ€™s law, and thus there is no refraction possible--we must *reflect*.
    bool hasTotalInternalReflection = refractionRatio * sinTheta > 0.999;
    if (hasTotalInternalReflection) return false;

    // Use Schlick's approximation for reflectance. At steep angles, we should reflect instead of refract.
    float reflectance = (1.0 - refractiveIndex) / (1.0 + refractiveIndex);
    reflectance *= reflectance;
    float schlickApproximation = reflectance + (1.0 - reflectance) * pow(1.0 - cosTheta, 5.0);
    if (schlickApproximation > hash_1(hashSeed)) return false;

    return true;
}



struct HitRecord {
    vec3 position;
    vec3 normal;
    float t;
    float u;
    float v;
    bool isFrontFace;
    Material material;
};

#define tNear 0.001

void set_face_normal(in Ray ray, in vec3 outwardNormal, inout HitRecord record) {
    record.isFrontFace = dot(ray.direction, outwardNormal) < 0.0;
    record.normal = record.isFrontFace ? outwardNormal : -outwardNormal;
}

// Source: DomNomNom / intersectAABB.glsl
// https://gist.github.com/DomNomNom/46bb1ce47f68d255fd5d
bool hit_aabb(in Ray ray, in AABB aabb, in float t, in vec3 invRayDirection) {
    vec3 tMin = (aabb.min - ray.origin) * invRayDirection;
    vec3 tMax = (aabb.max - ray.origin) * invRayDirection;

    vec3 t0 = min(tMin, tMax);
    vec3 t1 = max(tMin, tMax);

    float tNearest = max(max(max(t0.x, t0.y), t0.z), tNear);
    float tFurthest = min(min(min(t1.x, t1.y), t1.z), t);

    return tNearest < tFurthest;
}

// Source: Inigo Quilez's Blog
// https://iquilezles.org/articles/intersectors/
void hit_sphere(in Ray ray, in Sphere sphere, inout HitRecord record) {
    vec3 relativeDir = ray.origin - sphere.center;
    float b = dot(relativeDir, ray.direction);
    vec3 qc = relativeDir - b * ray.direction;
    float discriminant = sphere.radius*sphere.radius - dot(qc, qc);

    if (discriminant < 0.0) return;

    // Find the nearest root that lies in the acceptable range.
    float root = -b - sqrt(discriminant);
    if (!(tNear < root && root < record.t)) return;

    record.t = root;
    record.position = ray.origin + record.t * ray.direction;
    vec3 outwardNormal = (record.position - sphere.center) / sphere.radius;
    set_face_normal(ray, outwardNormal, record);
    record.material = sphere.material;

    float theta = acos(-outwardNormal.y);
    float phi = atan(-outwardNormal.z, outwardNormal.x) + PI;
    record.u = phi / (2*PI);
    record.v = theta / PI;
}

void hit_quad(in Ray ray, in Quad quad, inout HitRecord record) {
    // No hit if the ray is parallel to the plane
    float denominator = dot(quad.normal, ray.direction);
    if (abs(denominator) < 1e-8) return;

    // No hit if the hit-point parameter `t` is outside the ray interval
    float t = (quad.d - dot(quad.normal, ray.origin)) / denominator;
    if (!(tNear < t && t < record.t)) return;

    // Check if the hit-point lies within the planar shape from its plane coordinates
    vec3 intersection = ray.origin + t * ray.direction;
    vec3 planarHitPoint = intersection - quad.corner;
    float alpha = dot(quad.w, cross(planarHitPoint, quad.v));
    float beta = dot(quad.w, cross(quad.u, planarHitPoint));

    if ((clamp(alpha, 0.0, 1.0) != alpha) || (clamp(beta, 0.0, 1.0) != beta)) return;

    record.t = t;
    record.position = intersection;
    set_face_normal(ray, quad.normal, record);
    record.material = quad.material;
    record.u = alpha;
    record.v = beta;
}

// Source: Fast Minimum Storage Ray-Triangle Intersection
// https://cadxfem.org/inf/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf
void hit_tri(in Ray ray, in Tri tri, inout HitRecord record) {
    vec3 edge10 = tri.v1 - tri.v0;
    vec3 edge20 = tri.v2 - tri.v0;
    vec3 p = cross(ray.direction, edge20);
    float det = dot(edge10, p);

    // Check if the ray is in the same plane as the triangle or a backface.
    if (abs(det) < 1e-8) return;

    vec3 edgeR0 = ray.origin - tri.v0;
    vec3 q = cross(edgeR0, edge10);

    float alpha;
    float beta = dot(edgeR0, p);         // u
    float gamma = dot(ray.direction, q); // v

    if (beta < 0.0 || gamma < 0.0 || (beta + gamma) > det) return;

    float invDet = 1.0 / det;
    float t = dot(edge20, q) * invDet;

    if (!(tNear < t && t < record.t)) return;

    record.t = t;
    record.position = ray.origin + record.t * ray.direction;
    vec3 outwardNormal = cross(edge20, edge10);
    set_face_normal(ray, outwardNormal, record);
    record.material = tri.material;

    // Find uv on texture based on barycentric coordinates of intersection point
    beta *= invDet;
    gamma *= invDet;
    alpha = 1.0 - beta - gamma;
    record.u = (alpha * tri.u.x) + (beta * tri.u.y) + (gamma * tri.u.z);
    record.v = (alpha * tri.v.x) + (beta * tri.v.y) + (gamma * tri.v.z);
}



bool near_zero(in vec3 x) {
    const float epsilon = 1e-8;
    return abs(x.x) < epsilon && abs(x.y) < epsilon && abs(x.z) < epsilon;
}

// Source: Implementing a practical rendering system using GLSL - Toshiya Hachisuka
// https://cs.uwaterloo.ca/%7Ethachisu/tdf2015.pdf
bool hit_world(in Ray ray, out HitRecord record) {
    bool hasHitAnything = false;
    uint nextNodeIndex = 0; // Start at root of BVH
    vec3 invRayDirection = 1.0 / ray.direction;

    record.t = INFINITY;
    while (nextNodeIndex != BAD_INDEX) {
        #define node bvh[nextNodeIndex] // Somehow this is faster than `BVHNode node = bvh[nextNodeIndex]`?!?
        #define isLeaf node.numChildren != 0

        if (hit_aabb(ray, node.aabb, record.t, invRayDirection)) {
            if (isLeaf) {
                uint startIndex = node.objectBufferIndex;
                uint endIndex = startIndex + node.numChildren;

                switch(node.type) {
                    case TYPE_SPHERE:
                        for (uint i = startIndex; i < endIndex; i++) hit_sphere(ray, spheres[i], record);
                        break;
                    case TYPE_QUAD:
                        for (uint i = startIndex; i < endIndex; i++) hit_quad(ray, quads[i], record);
                        break;
                    case TYPE_TRI:
                        for (uint i = startIndex; i < endIndex; i++) hit_tri(ray, tris[i], record);
                }
            }
            nextNodeIndex = node.hitIndex;
        } else {
            nextNodeIndex = node.missIndex;
        }
    }

    hit_quad(ray, quads[0], record);

    return record.t != INFINITY;
}

vec3 emit(in HitRecord record) {
    switch (record.material.type) {
        case MAT_DIFFUSE_LIGHT:
            return record.material.albedo;
        default:
            return vec3(0.0);
    }
}

bool scatter(inout Ray ray, in HitRecord record, inout vec3 attenuation) {
    attenuation = record.material.albedo;
    switch (record.material.type) {
        case MAT_LAMBERTIAN:
            vec3 scatterDirection = record.normal + random_in_unit_sphere(hashSeed);
            // Catch degenerate scatter direction
//            if (near_zero(scatterDirection)) scatterDirection = record.normal;

            ray = Ray(record.position, normalize(scatterDirection));

//            if (record.material.albedo == vec3(0.5)) {
//                ivec2 uvFlat = ivec2(floor(1000.0 * record.u), floor(1000.0 * record.v));
//                attenuation = ((uvFlat.x + uvFlat.y) % 2 == 0) ? vec3(0.2, 0.3, 0.1) : vec3(0.5);
//            }

            if (record.material.albedo == vec3(0, 1, 1)) {
                vec3 color = texture(tex, vec2(record.u, record.v)).xyz;
                attenuation = color;
            }

            return true;
        case MAT_METAL:
            float fuzziness = record.material.fuzziness;
            vec3 reflectDirection = reflect(ray.direction, record.normal);
            reflectDirection += fuzziness * random_in_unit_sphere(hashSeed);

            ray = Ray(record.position, normalize(reflectDirection));

            // Absorb rays that graze the surface of a sphere
            return dot(ray.direction, record.normal) > 0.0;
        case MAT_DIELECTRIC:
            float refractionIndex = record.material.fuzziness;
            float refractionRatio = record.isFrontFace ? 1.0 / refractionIndex : refractionIndex;
            // Determine if the ray should be refracted or reflected
            vec3 refractDirection;
            if (should_refract(ray.direction, record.normal, refractionIndex, refractionRatio))
                refractDirection = refract(ray.direction, record.normal, refractionRatio);
            else
                refractDirection = reflect(ray.direction, record.normal);

            ray = Ray(record.position, normalize(refractDirection));
            attenuation = vec3(1.0);

            return true;
        default:
            return false;
    }
}

vec3 ray_color(in Ray ray) {
    HitRecord record;
    vec3 attenuation;
    uint depth;

    // --- Render AABB Option ---
    if (camera.shouldRenderAABB) {
        vec3 invRayDirection = 1.0 / ray.direction;
        // Return the color white if any AABB is hit across the BVH.
        for (uint i = 0; i < bvh.length(); i++) {
            AABB aabbSrc = bvh[i].aabb;
            AABB aabbMod = AABB(aabbSrc.min + 0.005, 0.0f, aabbSrc.max - 0.005); // So we just get the outline
            if (hit_aabb(ray, aabbSrc, INFINITY, invRayDirection) && !hit_aabb(ray, aabbMod, INFINITY, invRayDirection))
                return vec3(1.0);
        }
    }

    // --- Main Color Pass ---
    vec3 color = vec3(1.0);
    vec3 emittedColor = vec3(0.0);
    for (depth = 0; depth < MAX_BOUNCES; depth++) {
        // Return background if no hit occurs
        if (!hit_world(ray, record)) {
            if (scene.backgroundColor != DEFAULT_BACKGROUND) return scene.backgroundColor;

            float a = 0.5 * (ray.direction.y + 1.0);
            color *= mix(vec3(1.0), vec3(0.5, 0.7, 1.0), a);
            return color;
        }

        emittedColor += color * emit(record);
        // Return the emitted color (if any) if the ray was entirely absorbed
        if (!scatter(ray, record, attenuation)) return emittedColor;

        color *= attenuation + emittedColor;
    }
    return vec3(0.0); // Kill ray after `MAX_BOUNCES` iterations
}

void main() {
    vec3 cumulativeColor = imageLoad(outImage, ivec2(gl_GlobalInvocationID.xy)).xyz;
    vec3 passColor = vec3(0.0);

    for (uint s = 0; s < NUM_SAMPLES; s++) {
        vec2 uvOffset = hash_2(hashSeed);
        vec2 uv = vec2(gl_GlobalInvocationID.xy + uvOffset) / imageSize(outImage);

        passColor += ray_color(camera_get_ray(uv));
    }
    passColor = passColor * (1.0 / NUM_SAMPLES);
//    passColor = sqrt(passColor); // sRGB gamma correction

    // If this is the first iteration of the scene, reset the cumulative color.
    cumulativeColor += int(camera.iteration == 1) * -cumulativeColor + passColor;

    imageStore(outImage, ivec2(gl_GlobalInvocationID.xy), vec4(cumulativeColor, camera.iteration));
}