#version 450

layout (local_size_x = 16, local_size_y = 16) in;

layout (set = 0, binding = 0) uniform CameraParameters {
    vec4 from;
    vec4 at;
    vec4 up;
    vec4 cameraBackward;
    vec4 cameraRight;
    vec4 cameraUp;
    vec4 lowerLeftCorner;
    vec4 horizontal;
    vec4 vertical;
} camera;

layout (set = 0, binding = 1, rgba8) uniform writeonly image2D outImage;

struct ray {
    vec3 origin;
    vec3 direction;
};

vec3 ray_at(ray ray, float t) {
    return ray.origin + t * ray.direction;
}

float hit_sphere(vec3 center, float radius, ray ray) {
    vec3 oc = ray.origin - center;
    float a = dot(ray.direction, ray.direction);
    float b = 2.0 * dot(oc, ray.direction);
    float c = dot(oc, oc) - radius*radius;
    float discriminant = b*b - 4.0*a*c;

    return (discriminant < 0.0) ? -1.0 : (-b - sqrt(discriminant)) / (2.0*a);
}

vec3 ray_color(ray ray) {
    float t = hit_sphere(vec3(0, 0, -1), 0.5, ray);
    if (t > 0.0) {
        vec3 normal = normalize(ray_at(ray, t) - vec3(0, 0, -1));
        return 0.5 * (normal + 1.0);
    }

    vec3 unitDirection = normalize(ray.direction);
    float a = 0.5 * (unitDirection.y + 1.0);
    return (1.0 - a) * vec3(1.0) + a * vec3(0.5, 0.7, 1.0);
}

void main() {
    vec2 uv = vec2(gl_GlobalInvocationID.xy + 0.5) / imageSize(outImage);

//    float lensRadius = aperture * 0.5;
    vec3 offset = camera.cameraRight.xyz * 0.5 + camera.cameraUp.xyz * 0.5;

    vec3 cameraCenter = camera.from.xyz + offset;
    vec3 pixelCenter = camera.lowerLeftCorner.xyz + uv.x*camera.horizontal.xyz + uv.y*camera.vertical.xyz - camera.from.xyz - offset;

    ray ray = ray(cameraCenter, pixelCenter);

    vec3 color = ray_color(ray);

    imageStore(outImage, ivec2(gl_GlobalInvocationID.xy), vec4(color, 0.0));
}