#version 450

#define PI       3.14159265359
#define INFINITY 3.402823466e+38

#define MAT_LAMBERTIAN 1
#define MAT_METAL      2
#define MAT_DIELECTRIC 3

#define NUM_SAMPLES 1
#define MAX_BOUNCES 10

layout (local_size_x = 16, local_size_y = 16) in;

layout (set = 0, binding = 0) uniform CameraParameters {
    vec4 from, at, up, cameraBackwards, cameraRight, cameraUp, lowerLeftCorner, horizontal, vertical;
    float lensRadius, iteration, seed;
} camera;

layout (set = 0, binding = 1, rgba8) uniform image2D outImage;

struct Interval {
    float min, max;
};

bool interval_contains(Interval interval, float x) {
    return interval.min <= x && x <= interval.max;
}

bool interval_surrounds(Interval interval, float x) {
    return interval.min < x && x < interval.max;
}

float interval_clamp(Interval interval, float x) {
    return (x < interval.min) ? interval.min : (x > interval.max) ? interval.max : x;
}



// Quality hashes collection by nimitz https://www.shadertoy.com/view/Xt3cDn
float hashSeed = camera.seed * dot(gl_GlobalInvocationID.xy, gl_GlobalInvocationID.yx);

uint base_hash(uvec2 seed) {
    seed = 1103515245U * ((seed >> 1U) ^ (seed.yx));
    uint h32 = 1103515245U * ((seed.x) ^ (seed.y >> 3U));
    return h32 ^ (h32 >> 16);
}

float hash_1(inout float seed) {
    uint n = base_hash(floatBitsToUint(vec2(seed += 0.1, seed += 0.1)));
    return float(n) * (1.0 / float(0xffffffffU));
}

vec2 hash_2(inout float seed) {
    uint n = base_hash(floatBitsToUint(vec2(seed += 0.1, seed += 0.1)));
    uvec2 rz = uvec2(n, n * 48271U);
    return vec2(rz.xy & uvec2(0x7fffffffU)) / float(0x7fffffff);
}

vec3 hash_3(inout float seed) {
    uint n = base_hash(floatBitsToUint(vec2(seed += 0.1, seed += 0.1)));
    uvec3 rz = uvec3(n, n * 16807U, n * 48271U);
    return vec3(rz & uvec3(0x7fffffffU)) / float(0x7fffffff);
}

vec2 random_in_unit_disk(inout float seed) {
    vec2 h = hash_2(seed) * vec2(1.0, 2.0 * PI);
    return h.x * vec2(cos(h.y), sin(h.y));
}

// Source: Karthik Karanth's blog:
// https://karthikkaranth.me/blog/generating-random-points-in-a-sphere/#better-choice-of-spherical-coordinates
vec3 random_in_unit_sphere(inout float seed) {
    vec3 h = hash_3(seed) * vec3(2.0 * PI, 2.0, 1.0) - vec3(0.0, 1.0, 0.0);
    float theta = h.x;
    float sinPhi = sqrt(1.0 - h.y * h.y);
    float r = pow(h.z, 0.3333333334);

    return r * vec3(cos(theta) * sinPhi, sin(theta) * sinPhi, h.y);
}



struct Ray {
    vec3 origin, direction;
};

vec3 ray_at(Ray ray, float t) {
    return ray.origin + t * ray.direction;
}

Ray camera_get_ray(vec2 uv) {
    vec2 radius = camera.lensRadius * random_in_unit_disk(hashSeed);
    vec3 offset = camera.cameraRight.xyz * radius.x + camera.cameraUp.xyz * radius.y;

    vec3 rayOrigin = camera.from.xyz + offset;
    vec3 rayDirection = camera.lowerLeftCorner.xyz + uv.x*camera.horizontal.xyz + uv.y*camera.vertical.xyz - camera.from.xyz - offset;

    return Ray(rayOrigin, normalize(rayDirection));
}



struct Material {
    uint type;
    vec3 albedo;
    float fuzziness;
};

bool should_refract(in vec3 incoming, in vec3 normal, in float refractiveIndex, in float refractionRatio) {
    float cosTheta = min(dot(-incoming, normal), 1.0);
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    // One troublesome practical issue is that when the ray is in the material with the higher refractive index,
    // there is no real solution to Snellâ€™s law, and thus there is no refraction possible--we must *reflect*.
    bool hasTotalInternalReflection = refractionRatio * sinTheta > 0.999;
    if (hasTotalInternalReflection) return false;

    // Use Schlick's approximation for reflectance. At steep angles, we should reflect instead of refract.
    float reflectance = (1.0 - refractiveIndex) / (1.0 + refractiveIndex);
    reflectance *= reflectance;
    float schlickApproximation = reflectance + (1.0 - reflectance) * pow(1.0 - cosTheta, 5.0);
    if (schlickApproximation > hash_1(hashSeed)) return false;

    return true;
}



struct HitRecord {
    vec3 position;
    vec3 normal;
    Material material;
    float t;
    bool isFrontFace;
};

void set_face_normal(in Ray ray, inout HitRecord record, in vec3 outwardNormal) {
    record.isFrontFace = dot(ray.direction, outwardNormal) < 0.0;
    record.normal = record.isFrontFace ? outwardNormal : -outwardNormal;
}



struct Sphere {
    vec3 center;
    float radius;
    Material material;
};

bool hit_sphere(in Ray ray, Sphere sphere, in Interval t, inout HitRecord record) {
    vec3 relativeDir = ray.origin - sphere.center;
    float a = dot(ray.direction, ray.direction);
    float bHalf = dot(relativeDir, ray.direction);
    float c = dot(relativeDir, relativeDir) - sphere.radius*sphere.radius;
    float discriminant = bHalf*bHalf - a*c;

    if (discriminant < 0.0) return false;

    // Find the nearest root that lies in the acceptable range.
    float dSqrt = sqrt(discriminant);
    float root = (-bHalf - dSqrt) / a;
    if (!interval_surrounds(t, root)) {
        root = (-bHalf + dSqrt) / a;
        if (!interval_surrounds(t, root)) return false;
    }

    record.t = root;
    record.position = ray_at(ray, record.t);
    vec3 outwardNormal = (record.position - sphere.center) / sphere.radius;
    set_face_normal(ray, record, outwardNormal);
    record.material = sphere.material;

    return true;
}

Sphere[] spheres = Sphere[197](
    Sphere(vec3( 0, -2000, 0), 2000.0, Material(MAT_LAMBERTIAN, vec3(0.5, 0.5, 0.5), 0.0)),
    Sphere(vec3(-4,     1, 0),    1.0, Material(MAT_LAMBERTIAN, vec3(0.4, 0.2, 0.1), 0.0)),
    // An interesting and easy trick with dielectric spheres is to note that if you use a negative radius, the geometry
    // is unaffected, but the surface normal points inward. This can be used as a bubble to make a hollow glass sphere:
    Sphere(vec3( 0,     1, 0),    1.0, Material(MAT_DIELECTRIC, vec3(0.8, 0.8, 0.8), 1.5)),
    Sphere(vec3( 0,     1, 0),   -0.9, Material(MAT_DIELECTRIC, vec3(0.8, 0.8, 0.8), 1.5)),
    Sphere(vec3( 4,     1, 0),    1.0, Material(MAT_METAL,      vec3(0.7, 0.6, 0.5), 0.0)),

    Sphere(vec3(-6.990445, 0.200000, -6.610559), 0.2, Material(MAT_LAMBERTIAN, vec3(0.145667, 0.033274, 0.323453), 0.0)),
    Sphere(vec3(-6.748960, 0.200000, -5.235331), 0.2, Material(MAT_METAL,      vec3(0.776491, 0.715535, 0.567966), 0.450267)),
    Sphere(vec3(-6.105020, 0.200000, -4.180362), 0.2, Material(MAT_LAMBERTIAN, vec3(0.317874, 0.445854, 0.843605), 0.0)),
    Sphere(vec3(-6.781354, 0.200000, -3.381053), 0.2, Material(MAT_LAMBERTIAN, vec3(0.913130, 0.164225, 0.325906), 0.0)),
    Sphere(vec3(-6.691145, 0.200000, -2.756301), 0.2, Material(MAT_LAMBERTIAN, vec3(0.071871, 0.404680, 0.705632), 0.0)),
    Sphere(vec3(-6.414825, 0.200000, -1.738076), 0.2, Material(MAT_LAMBERTIAN, vec3(0.098165, 0.376618, 0.539814), 0.0)),
    Sphere(vec3(-6.417345, 0.200000, -0.151764), 0.2, Material(MAT_LAMBERTIAN, vec3(0.272624, 0.177046, 0.268753), 0.0)),
    Sphere(vec3(-6.787198, 0.200000, 0.805079), 0.2, Material(MAT_LAMBERTIAN, vec3(0.059857, 0.522614, 0.008102), 0.0)),
    Sphere(vec3(-6.800026, 0.200000, 1.452303), 0.2, Material(MAT_LAMBERTIAN, vec3(0.233517, 0.134597, 0.252168), 0.0)),
    Sphere(vec3(-6.220815, 0.200000, 2.288755), 0.2, Material(MAT_METAL,      vec3(0.618193, 0.843969, 0.616090), 0.458781)),
    Sphere(vec3(-6.208116, 0.200000, 3.308214), 0.2, Material(MAT_LAMBERTIAN, vec3(0.298929, 0.712042, 0.734305), 0.0)),
    Sphere(vec3(-6.880104, 0.200000, 4.480617), 0.2, Material(MAT_LAMBERTIAN, vec3(0.205444, 0.363776, 0.754047), 0.0)),
    Sphere(vec3(-6.413256, 0.200000, 5.443388), 0.2, Material(MAT_METAL,      vec3(0.618757, 0.542175, 0.696699), 0.382370)),
    Sphere(vec3(-6.293542, 0.200000, 6.004521), 0.2, Material(MAT_LAMBERTIAN, vec3(0.515824, 0.618042, 0.126032), 0.0)),
    Sphere(vec3(-5.590534, 0.200000, -6.773092), 0.2, Material(MAT_LAMBERTIAN, vec3(0.028312, 0.042911, 0.247439), 0.0)),
    Sphere(vec3(-5.600004, 0.200000, -5.872967), 0.2, Material(MAT_METAL,      vec3(0.669873, 0.747123, 0.674778), 0.389161)),
    Sphere(vec3(-5.104408, 0.200000, -4.691932), 0.2, Material(MAT_LAMBERTIAN, vec3(0.447992, 0.590059, 0.866050), 0.0)),
    Sphere(vec3(-5.181713, 0.200000, -3.180120), 0.2, Material(MAT_LAMBERTIAN, vec3(0.296578, 0.367268, 0.903729), 0.0)),
    Sphere(vec3(-5.275061, 0.200000, -2.581783), 0.2, Material(MAT_LAMBERTIAN, vec3(0.055886, 0.088925, 0.028399), 0.0)),
    Sphere(vec3(-5.778374, 0.200000, -1.751407), 0.2, Material(MAT_LAMBERTIAN, vec3(0.100954, 0.110003, 0.146088), 0.0)),
    Sphere(vec3(-5.607878, 0.200000, -0.561909), 0.2, Material(MAT_METAL,      vec3(0.609768, 0.965297, 0.624289), 0.221929)),
    Sphere(vec3(-5.121154, 0.200000, 0.316587), 0.2, Material(MAT_LAMBERTIAN, vec3(0.253779, 0.267788, 0.148089), 0.0)),
    Sphere(vec3(-5.991854, 0.200000, 1.296169), 0.2, Material(MAT_LAMBERTIAN, vec3(0.012303, 0.436129, 0.078746), 0.0)),
    Sphere(vec3(-5.993847, 0.200000, 2.291891), 0.2, Material(MAT_METAL,      vec3(0.542897, 0.639995, 0.556242), 0.256924)),
    Sphere(vec3(-5.207150, 0.200000, 3.051601), 0.2, Material(MAT_DIELECTRIC, vec3(1.000000, 1.000000, 1.000000), 1.500000)),
    Sphere(vec3(-5.962920, 0.200000, 4.195359), 0.2, Material(MAT_LAMBERTIAN, vec3(0.002237, 0.762276, 0.378621), 0.0)),
    Sphere(vec3(-5.536184, 0.200000, 5.273940), 0.2, Material(MAT_LAMBERTIAN, vec3(0.633767, 0.188157, 0.348692), 0.0)),
    Sphere(vec3(-5.811859, 0.200000, 6.737868), 0.2, Material(MAT_LAMBERTIAN, vec3(0.654703, 0.306893, 0.016609), 0.0)),
    Sphere(vec3(-4.727750, 0.200000, -6.599408), 0.2, Material(MAT_LAMBERTIAN, vec3(0.240851, 0.038959, 0.008020), 0.0)),
    Sphere(vec3(-4.355989, 0.200000, -5.680924), 0.2, Material(MAT_LAMBERTIAN, vec3(0.481633, 0.060780, 0.371108), 0.0)),
    Sphere(vec3(-4.843397, 0.200000, -4.525740), 0.2, Material(MAT_LAMBERTIAN, vec3(0.112272, 0.207249, 0.282391), 0.0)),
    Sphere(vec3(-4.167462, 0.200000, -3.275324), 0.2, Material(MAT_LAMBERTIAN, vec3(0.435802, 0.019631, 0.037098), 0.0)),
    Sphere(vec3(-4.250515, 0.200000, -2.899721), 0.2, Material(MAT_LAMBERTIAN, vec3(0.015627, 0.046997, 0.393289), 0.0)),
    Sphere(vec3(-4.127938, 0.200000, -1.532461), 0.2, Material(MAT_LAMBERTIAN, vec3(0.152451, 0.134427, 0.028355), 0.0)),
    Sphere(vec3(-4.275151, 0.200000, -0.579778), 0.2, Material(MAT_LAMBERTIAN, vec3(0.247243, 0.638164, 0.082997), 0.0)),
    Sphere(vec3(-4.561369, 0.200000, 0.554144), 0.2, Material(MAT_LAMBERTIAN, vec3(0.151934, 0.286562, 0.024111), 0.0)),
    Sphere(vec3(-4.137160, 0.200000, 1.582942), 0.2, Material(MAT_LAMBERTIAN, vec3(0.898713, 0.031964, 0.091893), 0.0)),
    Sphere(vec3(-4.188945, 0.200000, 2.307002), 0.2, Material(MAT_LAMBERTIAN, vec3(0.325078, 0.117839, 0.146200), 0.0)),
    Sphere(vec3(-4.727449, 0.200000, 3.373917), 0.2, Material(MAT_LAMBERTIAN, vec3(0.176304, 0.473109, 0.322078), 0.0)),
    Sphere(vec3(-4.853875, 0.200000, 4.108790), 0.2, Material(MAT_LAMBERTIAN, vec3(0.694405, 0.509902, 0.155204), 0.0)),
    Sphere(vec3(-4.306516, 0.200000, 5.826316), 0.2, Material(MAT_LAMBERTIAN, vec3(0.314103, 0.023932, 0.206113), 0.0)),
    Sphere(vec3(-4.379072, 0.200000, 6.706297), 0.2, Material(MAT_LAMBERTIAN, vec3(0.279345, 0.199911, 0.020525), 0.0)),
    Sphere(vec3(-3.546230, 0.200000, -6.924634), 0.2, Material(MAT_LAMBERTIAN, vec3(0.754964, 0.001573, 0.428895), 0.0)),
    Sphere(vec3(-3.621845, 0.200000, -5.644660), 0.2, Material(MAT_LAMBERTIAN, vec3(0.332642, 0.014774, 0.475754), 0.0)),
    Sphere(vec3(-3.908580, 0.200000, -4.904433), 0.2, Material(MAT_METAL,      vec3(0.613190, 0.798350, 0.784368), 0.075528)),
    Sphere(vec3(-3.898468, 0.200000, -3.214958), 0.2, Material(MAT_LAMBERTIAN, vec3(0.083695, 0.001314, 0.301603), 0.0)),
    Sphere(vec3(-3.263148, 0.200000, -2.956810), 0.2, Material(MAT_LAMBERTIAN, vec3(0.391035, 0.133927, 0.183708), 0.0)),
    Sphere(vec3(-3.261072, 0.200000, -1.235226), 0.2, Material(MAT_LAMBERTIAN, vec3(0.175444, 0.676435, 0.217411), 0.0)),
    Sphere(vec3(-3.419206, 0.200000, -0.434896), 0.2, Material(MAT_LAMBERTIAN, vec3(0.275359, 0.077248, 0.114019), 0.0)),
    Sphere(vec3(-3.326509, 0.200000, 0.231888), 0.2, Material(MAT_LAMBERTIAN, vec3(0.304556, 0.205644, 0.101010), 0.0)),
    Sphere(vec3(-3.812415, 0.200000, 1.435047), 0.2, Material(MAT_DIELECTRIC, vec3(1.000000, 1.000000, 1.000000), 1.500000)),
    Sphere(vec3(-3.731784, 0.200000, 2.316759), 0.2, Material(MAT_LAMBERTIAN, vec3(0.239919, 0.519501, 0.483214), 0.0)),
    Sphere(vec3(-3.346231, 0.200000, 3.750805), 0.2, Material(MAT_METAL,      vec3(0.598669, 0.738346, 0.558021), 0.236704)),
    Sphere(vec3(-3.300193, 0.200000, 4.803979), 0.2, Material(MAT_LAMBERTIAN, vec3(0.141657, 0.416275, 0.708089), 0.0)),
    Sphere(vec3(-3.143801, 0.200000, 5.876407), 0.2, Material(MAT_LAMBERTIAN, vec3(0.570033, 0.083980, 0.286965), 0.0)),
    Sphere(vec3(-3.448695, 0.200000, 6.767025), 0.2, Material(MAT_LAMBERTIAN, vec3(0.421549, 0.053556, 0.558295), 0.0)),
    Sphere(vec3(-2.134234, 0.200000, -6.725400), 0.2, Material(MAT_LAMBERTIAN, vec3(0.345712, 0.055643, 0.127559), 0.0)),
    Sphere(vec3(-2.563896, 0.200000, -5.144576), 0.2, Material(MAT_LAMBERTIAN, vec3(0.773987, 0.112211, 0.261107), 0.0)),
    Sphere(vec3(-2.142658, 0.200000, -4.113058), 0.2, Material(MAT_LAMBERTIAN, vec3(0.171909, 0.028165, 0.038834), 0.0)),
    Sphere(vec3(-2.505819, 0.200000, -3.185200), 0.2, Material(MAT_LAMBERTIAN, vec3(0.015030, 0.560880, 0.840619), 0.0)),
    Sphere(vec3(-2.571142, 0.200000, -2.705793), 0.2, Material(MAT_LAMBERTIAN, vec3(0.016001, 0.733353, 0.103087), 0.0)),
    Sphere(vec3(-2.889337, 0.200000, -1.596096), 0.2, Material(MAT_LAMBERTIAN, vec3(0.157422, 0.067799, 0.278399), 0.0)),
    Sphere(vec3(-2.220441, 0.200000, -0.536275), 0.2, Material(MAT_LAMBERTIAN, vec3(0.020026, 0.095130, 0.033034), 0.0)),
    Sphere(vec3(-2.306917, 0.200000, 0.081322), 0.2, Material(MAT_LAMBERTIAN, vec3(0.200955, 0.151196, 0.134027), 0.0)),
    Sphere(vec3(-2.710294, 0.200000, 1.426323), 0.2, Material(MAT_METAL,      vec3(0.849740, 0.556585, 0.729162), 0.461895)),
    Sphere(vec3(-2.528522, 0.200000, 2.819074), 0.2, Material(MAT_LAMBERTIAN, vec3(0.364670, 0.510228, 0.116269), 0.0)),
    Sphere(vec3(-2.363187, 0.200000, 3.816302), 0.2, Material(MAT_METAL,      vec3(0.668044, 0.587951, 0.990790), 0.048349)),
    Sphere(vec3(-2.653288, 0.200000, 4.781638), 0.2, Material(MAT_LAMBERTIAN, vec3(0.250522, 0.389240, 0.067546), 0.0)),
    Sphere(vec3(-2.624667, 0.200000, 5.841413), 0.2, Material(MAT_METAL,      vec3(0.817950, 0.894028, 0.922582), 0.415039)),
    Sphere(vec3(-2.342914, 0.200000, 6.625574), 0.2, Material(MAT_LAMBERTIAN, vec3(0.141283, 0.225789, 0.101855), 0.0)),
    Sphere(vec3(-1.936315, 0.200000, -6.274022), 0.2, Material(MAT_LAMBERTIAN, vec3(0.186759, 0.151173, 0.021097), 0.0)),
    Sphere(vec3(-1.499794, 0.200000, -5.814981), 0.2, Material(MAT_DIELECTRIC, vec3(1.000000, 1.000000, 1.000000), 1.500000)),
    Sphere(vec3(-1.439223, 0.200000, -4.365604), 0.2, Material(MAT_LAMBERTIAN, vec3(0.117085, 0.069087, 0.068427), 0.0)),
    Sphere(vec3(-1.908524, 0.200000, -3.543816), 0.2, Material(MAT_METAL,      vec3(0.571610, 0.969453, 0.809475), 0.095921)),
    Sphere(vec3(-1.821896, 0.200000, -2.940110), 0.2, Material(MAT_METAL,      vec3(0.544495, 0.786977, 0.848532), 0.262096)),
    Sphere(vec3(-1.363948, 0.200000, -1.268945), 0.2, Material(MAT_LAMBERTIAN, vec3(0.197367, 0.702708, 0.474842), 0.0)),
    Sphere(vec3(-1.688745, 0.200000, -0.217442), 0.2, Material(MAT_LAMBERTIAN, vec3(0.485813, 0.332685, 0.099424), 0.0)),
    Sphere(vec3(-1.489894, 0.200000, 0.112013), 0.2, Material(MAT_METAL,      vec3(0.829983, 0.648672, 0.672216), 0.044782)),
    Sphere(vec3(-1.977799, 0.200000, 1.114281), 0.2, Material(MAT_LAMBERTIAN, vec3(0.000589, 0.085805, 0.163680), 0.0)),
    Sphere(vec3(-1.410749, 0.200000, 2.875377), 0.2, Material(MAT_LAMBERTIAN, vec3(0.146321, 0.652901, 0.147279), 0.0)),
    Sphere(vec3(-1.513670, 0.200000, 3.195329), 0.2, Material(MAT_METAL,      vec3(0.631788, 0.598772, 0.677883), 0.089439)),
    Sphere(vec3(-1.229098, 0.200000, 4.529460), 0.2, Material(MAT_LAMBERTIAN, vec3(0.703297, 0.040453, 0.344686), 0.0)),
    Sphere(vec3(-1.521846, 0.200000, 5.324375), 0.2, Material(MAT_METAL,      vec3(0.639603, 0.529648, 0.723258), 0.307488)),
    Sphere(vec3(-1.980875, 0.200000, 6.782385), 0.2, Material(MAT_LAMBERTIAN, vec3(0.397213, 0.296545, 0.034225), 0.0)),
    Sphere(vec3(-0.298452, 0.200000, -6.125507), 0.2, Material(MAT_LAMBERTIAN, vec3(0.279086, 0.135691, 0.566413), 0.0)),
    Sphere(vec3(-0.252814, 0.200000, -5.901115), 0.2, Material(MAT_METAL,      vec3(0.736851, 0.606162, 0.751636), 0.362285)),
    Sphere(vec3(-0.817691, 0.200000, -4.609825), 0.2, Material(MAT_LAMBERTIAN, vec3(0.231819, 0.461492, 0.248627), 0.0)),
    Sphere(vec3(-0.536361, 0.200000, -3.589119), 0.2, Material(MAT_METAL,      vec3(0.653219, 0.951503, 0.776886), 0.001250)),
    Sphere(vec3(-0.765803, 0.200000, -2.475061), 0.2, Material(MAT_LAMBERTIAN, vec3(0.331412, 0.131381, 0.016570), 0.0)),
    Sphere(vec3(-0.930876, 0.200000, -1.661763), 0.2, Material(MAT_LAMBERTIAN, vec3(0.218193, 0.017475, 0.077954), 0.0)),
    Sphere(vec3(-0.561793, 0.200000, -0.988420), 0.2, Material(MAT_LAMBERTIAN, vec3(0.569136, 0.050458, 0.023701), 0.0)),
    Sphere(vec3(-0.377035, 0.200000, 0.101667), 0.2, Material(MAT_DIELECTRIC, vec3(1.000000, 1.000000, 1.000000), 1.500000)),
    Sphere(vec3(-0.333886, 0.200000, 1.652579), 0.2, Material(MAT_LAMBERTIAN, vec3(0.219021, 0.225782, 0.213771), 0.0)),
    Sphere(vec3(-0.161234, 0.200000, 2.317897), 0.2, Material(MAT_LAMBERTIAN, vec3(0.349801, 0.081618, 0.336088), 0.0)),
    Sphere(vec3(-0.902036, 0.200000, 3.422319), 0.2, Material(MAT_LAMBERTIAN, vec3(0.568747, 0.129605, 0.368522), 0.0)),
    Sphere(vec3(-0.259467, 0.200000, 4.498593), 0.2, Material(MAT_LAMBERTIAN, vec3(0.021410, 0.053878, 0.177955), 0.0)),
    Sphere(vec3(-0.914292, 0.200000, 5.077358), 0.2, Material(MAT_LAMBERTIAN, vec3(0.039723, 0.043200, 0.021701), 0.0)),
    Sphere(vec3(-0.971005, 0.200000, 6.732050), 0.2, Material(MAT_LAMBERTIAN, vec3(0.279032, 0.267373, 0.016441), 0.0)),
    Sphere(vec3(0.241134, 0.200000, -6.742158), 0.2, Material(MAT_LAMBERTIAN, vec3(0.002484, 0.005789, 0.028843), 0.0)),
    Sphere(vec3(0.505729, 0.200000, -5.793974), 0.2, Material(MAT_LAMBERTIAN, vec3(0.000762, 0.138273, 0.018708), 0.0)),
    Sphere(vec3(0.646542, 0.200000, -4.859786), 0.2, Material(MAT_DIELECTRIC, vec3(1.000000, 1.000000, 1.000000), 1.500000)),
    Sphere(vec3(0.223022, 0.200000, -3.699678), 0.2, Material(MAT_LAMBERTIAN, vec3(0.105579, 0.100162, 0.039344), 0.0)),
    Sphere(vec3(0.393480, 0.200000, -2.247562), 0.2, Material(MAT_LAMBERTIAN, vec3(0.019536, 0.241468, 0.509438), 0.0)),
    Sphere(vec3(0.366857, 0.200000, -1.626164), 0.2, Material(MAT_LAMBERTIAN, vec3(0.022910, 0.026085, 0.816943), 0.0)),
    Sphere(vec3(0.108608, 0.200000, -0.341077), 0.2, Material(MAT_LAMBERTIAN, vec3(0.106842, 0.125309, 0.031697), 0.0)),
    Sphere(vec3(0.869308, 0.200000, 0.037773), 0.2, Material(MAT_LAMBERTIAN, vec3(0.083423, 0.060758, 0.563533), 0.0)),
    Sphere(vec3(0.791431, 0.200000, 1.387338), 0.2, Material(MAT_METAL,      vec3(0.968418, 0.586660, 0.686732), 0.158305)),
    Sphere(vec3(0.752281, 0.200000, 2.086706), 0.2, Material(MAT_LAMBERTIAN, vec3(0.821484, 0.154786, 0.207924), 0.0)),
    Sphere(vec3(0.484867, 0.200000, 3.606961), 0.2, Material(MAT_DIELECTRIC, vec3(1.000000, 1.000000, 1.000000), 1.500000)),
    Sphere(vec3(0.875163, 0.200000, 4.620825), 0.2, Material(MAT_LAMBERTIAN, vec3(0.621508, 0.033562, 0.122926), 0.0)),
    Sphere(vec3(0.612097, 0.200000, 5.835998), 0.2, Material(MAT_LAMBERTIAN, vec3(0.405661, 0.067095, 0.378946), 0.0)),
    Sphere(vec3(0.747111, 0.200000, 6.436908), 0.2, Material(MAT_LAMBERTIAN, vec3(0.129661, 0.166889, 0.361848), 0.0)),
    Sphere(vec3(1.006353, 0.200000, -6.583102), 0.2, Material(MAT_LAMBERTIAN, vec3(0.198143, 0.292568, 0.480458), 0.0)),
    Sphere(vec3(1.318786, 0.200000, -5.178911), 0.2, Material(MAT_LAMBERTIAN, vec3(0.007678, 0.157366, 0.242009), 0.0)),
    Sphere(vec3(1.055493, 0.200000, -4.422250), 0.2, Material(MAT_LAMBERTIAN, vec3(0.004548, 0.897190, 0.011116), 0.0)),
    Sphere(vec3(1.830547, 0.200000, -3.439603), 0.2, Material(MAT_LAMBERTIAN, vec3(0.715787, 0.129166, 0.189400), 0.0)),
    Sphere(vec3(1.718255, 0.200000, -2.120137), 0.2, Material(MAT_LAMBERTIAN, vec3(0.376348, 0.388000, 0.347530), 0.0)),
    Sphere(vec3(1.602776, 0.200000, -1.596121), 0.2, Material(MAT_LAMBERTIAN, vec3(0.398541, 0.697356, 0.376315), 0.0)),
    Sphere(vec3(1.879197, 0.200000, -0.622605), 0.2, Material(MAT_METAL,      vec3(0.576813, 0.771786, 0.500245), 0.234084)),
    Sphere(vec3(1.457797, 0.200000, 0.838006), 0.2, Material(MAT_DIELECTRIC, vec3(1.000000, 1.000000, 1.000000), 1.500000)),
    Sphere(vec3(1.184063, 0.200000, 1.725449), 0.2, Material(MAT_LAMBERTIAN, vec3(0.042110, 0.083879, 0.303100), 0.0)),
    Sphere(vec3(1.086745, 0.200000, 2.734265), 0.2, Material(MAT_METAL,      vec3(0.853718, 0.786687, 0.688049), 0.492930)),
    Sphere(vec3(1.164416, 0.200000, 3.208700), 0.2, Material(MAT_LAMBERTIAN, vec3(0.212275, 0.079010, 0.331754), 0.0)),
    Sphere(vec3(1.882576, 0.200000, 4.376086), 0.2, Material(MAT_LAMBERTIAN, vec3(0.213859, 0.207122, 0.081658), 0.0)),
    Sphere(vec3(1.791547, 0.200000, 5.420494), 0.2, Material(MAT_LAMBERTIAN, vec3(0.780731, 0.374090, 0.140501), 0.0)),
    Sphere(vec3(1.815559, 0.200000, 6.305157), 0.2, Material(MAT_DIELECTRIC, vec3(1.000000, 1.000000, 1.000000), 1.500000)),
    Sphere(vec3(2.833683, 0.200000, -6.933846), 0.2, Material(MAT_LAMBERTIAN, vec3(0.191323, 0.367295, 0.098244), 0.0)),
    Sphere(vec3(2.718111, 0.200000, -5.927674), 0.2, Material(MAT_LAMBERTIAN, vec3(0.208734, 0.536826, 0.617308), 0.0)),
    Sphere(vec3(2.345888, 0.200000, -4.564031), 0.2, Material(MAT_LAMBERTIAN, vec3(0.017019, 0.092137, 0.194190), 0.0)),
    Sphere(vec3(2.042205, 0.200000, -3.999640), 0.2, Material(MAT_LAMBERTIAN, vec3(0.104388, 0.362559, 0.032457), 0.0)),
    Sphere(vec3(2.672786, 0.200000, -2.237675), 0.2, Material(MAT_LAMBERTIAN, vec3(0.163269, 0.340618, 0.339239), 0.0)),
    Sphere(vec3(2.508426, 0.200000, -1.632530), 0.2, Material(MAT_METAL,      vec3(0.807534, 0.775656, 0.528286), 0.179929)),
    Sphere(vec3(2.114773, 0.200000, -0.321298), 0.2, Material(MAT_METAL,      vec3(0.582264, 0.738865, 0.680120), 0.475551)),
    Sphere(vec3(2.822658, 0.200000, 0.415475), 0.2, Material(MAT_LAMBERTIAN, vec3(0.414587, 0.409841, 0.150696), 0.0)),
    Sphere(vec3(2.762732, 0.200000, 1.626641), 0.2, Material(MAT_LAMBERTIAN, vec3(0.667205, 0.062707, 0.672233), 0.0)),
    Sphere(vec3(2.773703, 0.200000, 2.494229), 0.2, Material(MAT_LAMBERTIAN, vec3(0.323896, 0.120845, 0.292744), 0.0)),
    Sphere(vec3(2.707615, 0.200000, 3.815609), 0.2, Material(MAT_LAMBERTIAN, vec3(0.147511, 0.148290, 0.038436), 0.0)),
    Sphere(vec3(2.655964, 0.200000, 4.709882), 0.2, Material(MAT_LAMBERTIAN, vec3(0.004561, 0.875094, 0.113047), 0.0)),
    Sphere(vec3(2.785935, 0.200000, 5.420653), 0.2, Material(MAT_METAL,      vec3(0.703080, 0.829514, 0.966117), 0.274678)),
    Sphere(vec3(2.331285, 0.200000, 6.772120), 0.2, Material(MAT_LAMBERTIAN, vec3(0.665326, 0.491109, 0.085167), 0.0)),
    Sphere(vec3(3.682763, 0.200000, -6.187272), 0.2, Material(MAT_LAMBERTIAN, vec3(0.361937, 0.117393, 0.181821), 0.0)),
    Sphere(vec3(3.130512, 0.200000, -5.249604), 0.2, Material(MAT_LAMBERTIAN, vec3(0.403686, 0.182797, 0.190472), 0.0)),
    Sphere(vec3(3.329635, 0.200000, -4.777605), 0.2, Material(MAT_LAMBERTIAN, vec3(0.352853, 0.466830, 0.000266), 0.0)),
    Sphere(vec3(3.397272, 0.200000, -3.426490), 0.2, Material(MAT_LAMBERTIAN, vec3(0.197589, 0.245276, 0.096929), 0.0)),
    Sphere(vec3(3.386482, 0.200000, -2.668784), 0.2, Material(MAT_LAMBERTIAN, vec3(0.042756, 0.154564, 0.069935), 0.0)),
    Sphere(vec3(3.584839, 0.200000, -1.165444), 0.2, Material(MAT_METAL,      vec3(0.959866, 0.786910, 0.543021), 0.357794)),
    Sphere(vec3(3.896381, 0.200000, 1.063795), 0.2, Material(MAT_METAL,      vec3(0.538788, 0.881821, 0.958286), 0.325933)),
    Sphere(vec3(3.314901, 0.200000, 2.673530), 0.2, Material(MAT_DIELECTRIC, vec3(1.000000, 1.000000, 1.000000), 1.500000)),
    Sphere(vec3(3.469719, 0.200000, 3.600989), 0.2, Material(MAT_LAMBERTIAN, vec3(0.725771, 0.170322, 0.000109), 0.0)),
    Sphere(vec3(3.701278, 0.200000, 4.651099), 0.2, Material(MAT_METAL,      vec3(0.646531, 0.617749, 0.918890), 0.090137)),
    Sphere(vec3(3.502937, 0.200000, 5.043823), 0.2, Material(MAT_DIELECTRIC, vec3(1.000000, 1.000000, 1.000000), 1.500000)),
    Sphere(vec3(3.700149, 0.200000, 6.400443), 0.2, Material(MAT_LAMBERTIAN, vec3(0.316568, 0.049201, 0.273383), 0.0)),
    Sphere(vec3(4.616306, 0.200000, -6.597541), 0.2, Material(MAT_LAMBERTIAN, vec3(0.057864, 0.078889, 0.003715), 0.0)),
    Sphere(vec3(4.303920, 0.200000, -5.459448), 0.2, Material(MAT_LAMBERTIAN, vec3(0.371455, 0.249607, 0.000563), 0.0)),
    Sphere(vec3(4.095773, 0.200000, -4.378167), 0.2, Material(MAT_LAMBERTIAN, vec3(0.006929, 0.029397, 0.011109), 0.0)),
    Sphere(vec3(4.235725, 0.200000, -3.435674), 0.2, Material(MAT_LAMBERTIAN, vec3(0.335778, 0.060287, 0.409733), 0.0)),
    Sphere(vec3(4.406179, 0.200000, -2.453180), 0.2, Material(MAT_LAMBERTIAN, vec3(0.032407, 0.292088, 0.037759), 0.0)),
    Sphere(vec3(4.341118, 0.200000, -1.218112), 0.2, Material(MAT_LAMBERTIAN, vec3(0.014350, 0.687189, 0.388661), 0.0)),
    Sphere(vec3(4.809624, 0.200000, 1.106523), 0.2, Material(MAT_LAMBERTIAN, vec3(0.095674, 0.227434, 0.039980), 0.0)),
    Sphere(vec3(4.343171, 0.200000, 2.125419), 0.2, Material(MAT_LAMBERTIAN, vec3(0.081441, 0.005106, 0.085754), 0.0)),
    Sphere(vec3(4.268427, 0.200000, 3.358716), 0.2, Material(MAT_LAMBERTIAN, vec3(0.033546, 0.111013, 0.038753), 0.0)),
    Sphere(vec3(4.799373, 0.200000, 4.488794), 0.2, Material(MAT_LAMBERTIAN, vec3(0.063384, 0.126711, 0.179915), 0.0)),
    Sphere(vec3(4.288073, 0.200000, 5.166851), 0.2, Material(MAT_LAMBERTIAN, vec3(0.618321, 0.239685, 0.152667), 0.0)),
    Sphere(vec3(4.457097, 0.200000, 6.860766), 0.2, Material(MAT_METAL,      vec3(0.881474, 0.918574, 0.620908), 0.477467)),
    Sphere(vec3(5.643271, 0.200000, -6.611347), 0.2, Material(MAT_METAL,      vec3(0.577125, 0.849923, 0.988726), 0.073457)),
    Sphere(vec3(5.106583, 0.200000, -5.893871), 0.2, Material(MAT_LAMBERTIAN, vec3(0.249234, 0.384366, 0.045567), 0.0)),
    Sphere(vec3(5.213309, 0.200000, -4.649253), 0.2, Material(MAT_LAMBERTIAN, vec3(0.358931, 0.353538, 0.747007), 0.0)),
    Sphere(vec3(5.159036, 0.200000, -3.750338), 0.2, Material(MAT_LAMBERTIAN, vec3(0.160155, 0.199505, 0.239900), 0.0)),
    Sphere(vec3(5.063784, 0.200000, -2.855443), 0.2, Material(MAT_LAMBERTIAN, vec3(0.048327, 0.267553, 0.634975), 0.0)),
    Sphere(vec3(5.899471, 0.200000, -1.333039), 0.2, Material(MAT_LAMBERTIAN, vec3(0.091986, 0.496757, 0.065134), 0.0)),
    Sphere(vec3(5.833319, 0.200000, -0.750209), 0.2, Material(MAT_LAMBERTIAN, vec3(0.306457, 0.166156, 0.561455), 0.0)),
    Sphere(vec3(5.570049, 0.200000, 0.406908), 0.2, Material(MAT_LAMBERTIAN, vec3(0.027205, 0.014608, 0.316126), 0.0)),
    Sphere(vec3(5.694941, 0.200000, 1.718619), 0.2, Material(MAT_LAMBERTIAN, vec3(0.001651, 0.244897, 0.151977), 0.0)),
    Sphere(vec3(5.554140, 0.200000, 2.185679), 0.2, Material(MAT_LAMBERTIAN, vec3(0.033455, 0.580769, 0.206397), 0.0)),
    Sphere(vec3(5.875988, 0.200000, 3.043300), 0.2, Material(MAT_LAMBERTIAN, vec3(0.607765, 0.002676, 0.518710), 0.0)),
    Sphere(vec3(5.434186, 0.200000, 4.019685), 0.2, Material(MAT_LAMBERTIAN, vec3(0.174559, 0.000344, 0.083052), 0.0)),
    Sphere(vec3(5.489899, 0.200000, 5.082389), 0.2, Material(MAT_LAMBERTIAN, vec3(0.104970, 0.346320, 0.249253), 0.0)),
    Sphere(vec3(5.154842, 0.200000, 6.537067), 0.2, Material(MAT_LAMBERTIAN, vec3(0.414057, 0.152799, 0.241549), 0.0)),
    Sphere(vec3(6.092760, 0.200000, -6.264467), 0.2, Material(MAT_LAMBERTIAN, vec3(0.069284, 0.135505, 0.040680), 0.0)),
    Sphere(vec3(6.551060, 0.200000, -5.763466), 0.2, Material(MAT_METAL,      vec3(0.610511, 0.991655, 0.649656), 0.116644)),
    Sphere(vec3(6.063786, 0.200000, -4.551997), 0.2, Material(MAT_METAL,      vec3(0.642688, 0.678589, 0.814359), 0.043373)),
    Sphere(vec3(6.390233, 0.200000, -3.335895), 0.2, Material(MAT_LAMBERTIAN, vec3(0.324839, 0.206685, 0.020067), 0.0)),
    Sphere(vec3(6.174575, 0.200000, -2.224881), 0.2, Material(MAT_LAMBERTIAN, vec3(0.264621, 0.717461, 0.117816), 0.0)),
    Sphere(vec3(6.072516, 0.200000, -1.619215), 0.2, Material(MAT_LAMBERTIAN, vec3(0.135152, 0.058930, 0.693779), 0.0)),
    Sphere(vec3(6.355434, 0.200000, -0.437200), 0.2, Material(MAT_LAMBERTIAN, vec3(0.136251, 0.132308, 0.022221), 0.0)),
    Sphere(vec3(6.879900, 0.200000, 0.136970), 0.2, Material(MAT_LAMBERTIAN, vec3(0.154931, 0.417984, 0.011025), 0.0)),
    Sphere(vec3(6.325736, 0.200000, 1.703122), 0.2, Material(MAT_LAMBERTIAN, vec3(0.074333, 0.268593, 0.074558), 0.0)),
    Sphere(vec3(6.013682, 0.200000, 2.565398), 0.2, Material(MAT_LAMBERTIAN, vec3(0.140437, 0.125555, 0.167460), 0.0)),
    Sphere(vec3(6.149126, 0.200000, 3.129157), 0.2, Material(MAT_LAMBERTIAN, vec3(0.081469, 0.104502, 0.117732), 0.0)),
    Sphere(vec3(6.568755, 0.200000, 4.452066), 0.2, Material(MAT_LAMBERTIAN, vec3(0.566227, 0.287077, 0.602065), 0.0)),
    Sphere(vec3(6.582174, 0.200000, 5.496930), 0.2, Material(MAT_LAMBERTIAN, vec3(0.247737, 0.510935, 0.555283), 0.0)),
    Sphere(vec3(6.876108, 0.200000, 6.287451), 0.2, Material(MAT_LAMBERTIAN, vec3(0.518601, 0.627454, 0.512961), 0.0))
);

bool near_zero(in vec3 x) {
    const float epsilon = 1e-8;
    return abs(x.x) < epsilon && abs(x.y) < epsilon && abs(x.z) < epsilon;
}


bool hit_world(in Ray ray, in Interval t, out HitRecord record) {
    HitRecord tempRecord;
    bool hasHitAnything = false;
    float tClosest = t.max;

    for (uint i = 0; i < spheres.length(); i++) {
        if (hit_sphere(ray, spheres[i], Interval(t.min, tClosest), tempRecord)) {
            hasHitAnything = true;
            tClosest = tempRecord.t;
            record = tempRecord;
        }
    }
    return hasHitAnything;
}

bool scatter(in Ray ray, in HitRecord record, inout vec3 attenuation, inout Ray scattered) {
    switch (record.material.type) {
        case MAT_LAMBERTIAN:
            vec3 scatterDirection = record.normal + random_in_unit_sphere(hashSeed);
            // Catch degenerate scatter direction
            if (near_zero(scatterDirection)) scatterDirection = record.normal;

            scattered = Ray(record.position, normalize(scatterDirection));
            attenuation = record.material.albedo;

            return true;
        case MAT_METAL:
            float fuzziness = record.material.fuzziness;
            vec3 reflectDirection = reflect(ray.direction, record.normal);
            reflectDirection += fuzziness * random_in_unit_sphere(hashSeed);

            scattered = Ray(record.position, normalize(reflectDirection));
            attenuation = record.material.albedo;

            // Absorb rays that graze the surface of a sphere
            return dot(scattered.direction, record.normal) > 0.0;
        case MAT_DIELECTRIC:
            float refractionIndex = record.material.fuzziness;
            float refractionRatio = record.isFrontFace ? 1.0 / refractionIndex : refractionIndex;
            // Determine if the ray should be refracted or reflected
            vec3 refractDirection;
            if (should_refract(ray.direction, record.normal, refractionIndex, refractionRatio))
                refractDirection = refract(ray.direction, record.normal, refractionRatio);
            else
                refractDirection = reflect(ray.direction, record.normal);

            scattered = Ray(record.position, normalize(refractDirection));
            attenuation = vec3(1.0);

            return true;
        default:
            return false;
    }
}

vec3 ray_color(in Ray ray) {
    HitRecord record;
    vec3 attenuation;
    Ray scattered;
    uint depth;

    vec3 color = vec3(1.0);
    for (depth = 0; depth < MAX_BOUNCES; depth++) {
        // Return background if no hit occurs
        if (!hit_world(ray, Interval(0.001, INFINITY), record)) {
            float a = 0.5 * (normalize(ray.direction).y + 1.0);
            color *= mix(vec3(1.0), vec3(0.5, 0.7, 1.0), a);
            break;
        }

        // Return black if the ray was entirely absorbed
        if (!scatter(ray, record, attenuation, scattered))
            return vec3(0.0);

        ray = scattered;
        color *= attenuation;
    }

    return (depth == MAX_BOUNCES) ? vec3(0.0) : color;
}

void main() {
    vec3 cumulativeColor = imageLoad(outImage, ivec2(gl_GlobalInvocationID.xy)).xyz;
    vec3 passColor = vec3(0);

    for (uint s = 0; s < NUM_SAMPLES; s++) {
        vec2 uvOffset = hash_2(hashSeed);
        vec2 uv = vec2(gl_GlobalInvocationID.xy + uvOffset) / imageSize(outImage);

        passColor += ray_color(camera_get_ray(uv));
    }
    passColor = passColor * (1.0 / NUM_SAMPLES);
//    passColor = sqrt(passColor); // sRGB gamma correction

    // If this is the first iteration of the scene, don't include the old cumulative color.
    if (camera.iteration != 1) passColor += cumulativeColor;

    imageStore(outImage, ivec2(gl_GlobalInvocationID.xy), vec4(passColor, camera.iteration));
}