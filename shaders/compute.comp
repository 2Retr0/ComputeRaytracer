#version 450

layout (local_size_x = 16, local_size_y = 16) in;

layout (set = 0, binding = 0) uniform SceneData {
    mat4 view;
    mat4 projection;
    mat4 viewProjection;
    vec4 fogColor;          // w=exponent
    vec4 fogDistances;      // x=min; y=max; z,w=unused.
    vec4 ambientColor;
    vec4 sunlightDirection; // w= power
    vec4 sunlightColor;
} sceneData;

layout (binding = 1, rgba8) uniform writeonly image2D outImage;

struct ray {
    vec3 origin;
    vec3 direction;
};

vec3 ray_at(ray ray, float t) {
    return ray.origin + t * ray.direction;
}

float hit_sphere(vec3 center, float radius, ray ray) {
    vec3 oc = ray.origin - center;
    float a = dot(ray.direction, ray.direction);
    float b = 2.0 * dot(oc, ray.direction);
    float c = dot(oc, oc) - radius*radius;
    float discriminant = b*b - 4.0*a*c;

    return (discriminant < 0.0) ? -1.0 : (-b - sqrt(discriminant)) / (2.0*a);
}

vec3 ray_color(ray ray) {
    float t = hit_sphere(vec3(0, 0, -1), 0.5, ray);
    if (t > 0.0) {
        vec3 normal = normalize(ray_at(ray, t) - vec3(0, 0, -1));
        return 0.5 * (normal + 1.0);
    }

    vec3 unitDirection = normalize(ray.direction);
    float a = 0.5 * (unitDirection.y + 1.0);
    return (1.0 - a) * vec3(1.0) + a * vec3(0.5, 0.7, 1.0);
}

void main() {
    vec2 uv = vec2(gl_GlobalInvocationID.xy + 0.5) / imageSize(outImage);

    vec3 from = vec3(13, 2, 3);
    vec3 at = vec3(0, 0, 0);
    vec3 up = vec3(0, 1, 0);
    float fovDegrees = 30.0;
    float aspectRatio = 16.0 / 10.0; // HARDCODED BAD
    float aperture = 0.1;
    float focusDistance = 10.0;

    float theta = radians(fovDegrees);
    float viewportHeight = 2.0 * tan(theta * 0.5);
    float viewportWidth = aspectRatio * viewportHeight;

    vec3 w = normalize(from - at);
    vec3 u = normalize(cross(up, w));
    vec3 v = cross(w, u);

    vec3 origin = from;
    vec3 horizontal = focusDistance * viewportWidth * u;
    vec3 vertical = focusDistance * viewportHeight * v;
    vec3 lowerLeftCorner = origin - horizontal*0.5 - vertical*0.5 - focusDistance*w;

    float lensRadius = aperture * 0.5;
    vec3 offset = u * 0.5 + v * 0.5;

    vec3 cameraCenter = origin + offset;
    vec3 pixelCenter = lowerLeftCorner + uv.x*horizontal + uv.y*vertical - origin - offset;

    ray ray = ray(cameraCenter, pixelCenter);

    imageStore(outImage, ivec2(gl_GlobalInvocationID.xy), vec4(ray_color(ray), 0.0));
}